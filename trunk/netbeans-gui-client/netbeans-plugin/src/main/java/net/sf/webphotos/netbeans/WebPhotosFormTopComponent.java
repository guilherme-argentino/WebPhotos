/**
 * Copyright 2008 WebPhotos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.webphotos.netbeans;

import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.util.logging.Logger;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class WebPhotosFormTopComponent extends TopComponent {

    private static WebPhotosFormTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "net/sf/webphotos/netbeans/frame.png";
    private static final String PREFERRED_ID = "WebPhotosFormTopComponent";

    private WebPhotosFormTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(WebPhotosFormTopComponent.class, "CTL_WebPhotosFormTopComponent"));
        setToolTipText(NbBundle.getMessage(WebPhotosFormTopComponent.class, "HINT_WebPhotosFormTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    public void tbFotosPopupCalled(MouseEvent evt) {
        if (tbFotos.getSelectedRowCount() <= 1) {
            int selecao = tbFotos.rowAtPoint(evt.getPoint());
            tbFotos.setRowSelectionInterval(selecao, selecao);
        }
        if (evt.isPopupTrigger()) {
            //menuFoto.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        painelInfoAlbum = new javax.swing.JPanel();
        lblAlbum = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        lblCategoria = new javax.swing.JLabel();
        lstCategoriasAlbum = new javax.swing.JComboBox();
        lblData = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        lblDescricao = new javax.swing.JLabel();
        scrDescricao = new javax.swing.JScrollPane();
        txtDescricao = new javax.swing.JTextArea();
        scrFotos = new javax.swing.JScrollPane();
        tbFotos = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        setLayout(new java.awt.BorderLayout());

        painelInfoAlbum.setMinimumSize(new java.awt.Dimension(500, 250));
        painelInfoAlbum.setPreferredSize(new java.awt.Dimension(500, 300));
        painelInfoAlbum.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblAlbum, org.openide.util.NbBundle.getMessage(WebPhotosFormTopComponent.class, "WebPhotosFormTopComponent.lblAlbum.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblAlbum, gridBagConstraints);

        txtTitulo.setPreferredSize(new java.awt.Dimension(477, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(txtTitulo, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblCategoria, org.openide.util.NbBundle.getMessage(WebPhotosFormTopComponent.class, "WebPhotosFormTopComponent.lblCategoria.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblCategoria, gridBagConstraints);

        lstCategoriasAlbum.setModel(/*new javax.swing.DefaultComboBoxModel(Album.getAlbum().getCategoriasArray())*/new javax.swing.DefaultComboBoxModel());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lstCategoriasAlbum, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblData, org.openide.util.NbBundle.getMessage(WebPhotosFormTopComponent.class, "WebPhotosFormTopComponent.lblData.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblData, gridBagConstraints);

        txtData.setMinimumSize(new java.awt.Dimension(11, 22));
        txtData.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(txtData, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblDescricao, org.openide.util.NbBundle.getMessage(WebPhotosFormTopComponent.class, "WebPhotosFormTopComponent.lblDescricao.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblDescricao, gridBagConstraints);

        scrDescricao.setAutoscrolls(true);

        txtDescricao.setLineWrap(true);
        txtDescricao.setWrapStyleWord(true);
        scrDescricao.setViewportView(txtDescricao);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(scrDescricao, gridBagConstraints);

        tbFotos.setToolTipText(org.openide.util.NbBundle.getMessage(WebPhotosFormTopComponent.class, "WebPhotosFormTopComponent.tbFotos.toolTipText")); // NOI18N
        tbFotos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbFotosMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbFotosMouseReleased(evt);
            }
        });
        scrFotos.setViewportView(tbFotos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(scrFotos, gridBagConstraints);

        add(painelInfoAlbum, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void tbFotosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFotosMousePressed
        tbFotosPopupCalled(evt);
}//GEN-LAST:event_tbFotosMousePressed

    private void tbFotosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFotosMouseReleased
        tbFotosPopupCalled(evt);
}//GEN-LAST:event_tbFotosMouseReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblAlbum;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JComboBox lstCategoriasAlbum;
    private javax.swing.JPanel painelInfoAlbum;
    private javax.swing.JScrollPane scrDescricao;
    private javax.swing.JScrollPane scrFotos;
    private javax.swing.JTable tbFotos;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextArea txtDescricao;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized WebPhotosFormTopComponent getDefault() {
        if (instance == null) {
            instance = new WebPhotosFormTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the WebPhotosFormTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized WebPhotosFormTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(WebPhotosFormTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof WebPhotosFormTopComponent) {
            return (WebPhotosFormTopComponent) win;
        }
        Logger.getLogger(WebPhotosFormTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return WebPhotosFormTopComponent.getDefault();
        }
    }
}
