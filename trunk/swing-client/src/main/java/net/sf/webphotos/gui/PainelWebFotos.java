/**
 * Copyright 2008 WebPhotos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.webphotos.gui;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.util.logging.Level;
import javax.swing.*;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import net.sf.webphotos.Album;
import net.sf.webphotos.BancoImagem;
import net.sf.webphotos.PhotoDTO;
import net.sf.webphotos.action.*;
import net.sf.webphotos.dao.jpa.CategoryDAO;
import net.sf.webphotos.dao.jpa.CreditsDAO;
import net.sf.webphotos.gui.util.TableModelAlbum;
import net.sf.webphotos.gui.util.TableModelFoto;
import net.sf.webphotos.gui.util.TableSorter;
import net.sf.webphotos.model.CategoryVO;
import net.sf.webphotos.model.CreditsVO;
import net.sf.webphotos.tools.Thumbnail;
import net.sf.webphotos.util.ApplicationContextResource;
import net.sf.webphotos.util.Util;
import net.sf.webphotos.util.legacy.CacheFTP;
import org.apache.log4j.Logger;

/**
 * Desenvolve o painel principal do programa.
 *
 * @author guilherme
 */
public class PainelWebFotos extends javax.swing.JPanel {

    private static Logger log = Logger.getLogger(PainelWebFotos.class);
    private static PainelWebFotos janela;
    /**
     *
     */
    public static final String ACAO_NOVO = "novo";
    /**
     *
     */
    public static final String ACAO_CANCELAR = "cancelar";
    /**
     *
     */
    public static final String ACAO_FINALIZAR = "finalizar";
    /**
     *
     */
    public static final String ACAO_ALTERAR = "alterar";

    /**
     * Extras - Pesquisa TODO: revisar processo para usar Eventos
     *
     * @param force
     */
    public static void montagemComboPesquisa(Boolean force) {
        final String[] categoriasArray = Album.getAlbum().getCategoriasArray(force);
        final DefaultComboBoxModel defaultComboBoxModel = new javax.swing.DefaultComboBoxModel(categoriasArray);
        final DefaultComboBoxModel defaultComboBoxModelPainelPesquisa = new javax.swing.DefaultComboBoxModel(categoriasArray);
        
        defaultComboBoxModel.insertElementAt("", 0);
        defaultComboBoxModel.setSelectedItem(defaultComboBoxModel.getElementAt(0));
        
        defaultComboBoxModelPainelPesquisa.insertElementAt("Todas as Categorias", 0);
        defaultComboBoxModelPainelPesquisa.setSelectedItem(defaultComboBoxModelPainelPesquisa.getElementAt(0));
        
        lstCategoriasAlbum.setModel(defaultComboBoxModel);
        painelPesquisa.setCategoriasPesquisaComboBoxModel(defaultComboBoxModelPainelPesquisa);
    }

    /**
     * Creates new form PainelWebFotos
     */
    private PainelWebFotos() {
        /* Extras - Albuns */
        TableModelAlbum.getModel().setUltimoSQL(Util.getConfig().getString("sql1"));

        /* Extras - Máscara da Data */
        try {
            mascaraData = new javax.swing.text.MaskFormatter("##/##/####");
        } catch (ParseException ex) {
            log.error("Parsing Problem", ex);
        }

        initComponents();
        try {
            rotinasExtras();
        } catch (Exception ex) {
            log.error("Unexpected", ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lstCreditosTabelaFotos = new javax.swing.JComboBox();
        menuFoto = new javax.swing.JPopupMenu();
        menuItemFotoUp = new javax.swing.JMenuItem();
        menuItemFotoDown = new javax.swing.JMenuItem();
        menuSeparadorFoto = new javax.swing.JSeparator();
        menuItemFotoRedoThumbs = new javax.swing.JMenuItem();
        menuItemFotoDelete = new javax.swing.JMenuItem();
        menuAlbum = new javax.swing.JPopupMenu();
        menuItemAlbumRedoXML = new javax.swing.JMenuItem();
        menuItemAlbumRedoJS = new javax.swing.JMenuItem();
        menuSeparadorAlbum1 = new javax.swing.JSeparator();
        menuItemAlbumUp = new javax.swing.JMenuItem();
        menuItemAlbumDown = new javax.swing.JMenuItem();
        menuSeparadorAlbum2 = new javax.swing.JSeparator();
        menuItemAlbumRedoThumbs = new javax.swing.JMenuItem();
        menuItemAlbumDelete = new javax.swing.JMenuItem();
        painelPesquisa = new net.sf.webphotos.gui.component.PainelPesquisa();
        painelAlbuns = new javax.swing.JPanel();
        scrAlbuns = new javax.swing.JScrollPane();
        tbAlbuns = new javax.swing.JTable();
        lblTabelaInfo = new javax.swing.JLabel();
        painelDadosAlbum = new javax.swing.JPanel();
        painelInfoAlbum = new javax.swing.JPanel();
        lblAlbum = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        lblCategoria = new javax.swing.JLabel();
        lstCategoriasAlbum = new javax.swing.JComboBox();
        buttonAddCategory = new net.sf.webphotos.gui.component.BotaoIcone();
        lblData = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        lblDescricao = new javax.swing.JLabel();
        scrDescricao = new javax.swing.JScrollPane();
        txtDescricao = new javax.swing.JTextArea();
        scrFotos = new javax.swing.JScrollPane();
        tbFotos = new javax.swing.JTable();
        painelFormFoto = new javax.swing.JPanel();
        painelFoto = new net.sf.webphotos.gui.component.PainelFoto();
        lblLegenda = new javax.swing.JLabel();
        scrLegenda = new javax.swing.JScrollPane();
        txtLegenda = new javax.swing.JTextArea();
        lstCreditos = new javax.swing.JComboBox();
        buttonAddCredits = new net.sf.webphotos.gui.component.BotaoIcone();
        painelControle = new javax.swing.JPanel();
        scrLog = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        painelToolBar = new javax.swing.JPanel();
        btFTP = new net.sf.webphotos.gui.component.BotaoIcone();
        btUpload = new net.sf.webphotos.gui.component.BotaoIcone();
        btDownload = new net.sf.webphotos.gui.component.BotaoIcone();
        btAdicionarFotos = new net.sf.webphotos.gui.component.BotaoIcone();
        btAlterar = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();

        lstCreditosTabelaFotos.setModel(new javax.swing.DefaultComboBoxModel(net.sf.webphotos.PhotoDTO.getCreditosArray()));

        menuItemFotoUp.setText("Enviar Foto");
        menuItemFotoUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFotoUpActionPerformed(evt);
            }
        });
        menuFoto.add(menuItemFotoUp);

        menuItemFotoDown.setText("Receber Foto");
        menuItemFotoDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFotoDownActionPerformed(evt);
            }
        });
        menuFoto.add(menuItemFotoDown);
        menuFoto.add(menuSeparadorFoto);

        menuItemFotoRedoThumbs.setText("Refaz Thumbs");
        menuItemFotoRedoThumbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFotoRedoThumbsActionPerformed(evt);
            }
        });
        menuFoto.add(menuItemFotoRedoThumbs);

        menuItemFotoDelete.setText("Excluir Foto");
        menuItemFotoDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFotoDeleteActionPerformed(evt);
            }
        });
        menuFoto.add(menuItemFotoDelete);

        menuItemAlbumRedoXML.setText("Gerar Arquivo XML");
        menuItemAlbumRedoXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAlbumRedoXMLActionPerformed(evt);
            }
        });
        menuAlbum.add(menuItemAlbumRedoXML);

        menuItemAlbumRedoJS.setText("Gerar Arquivo JS");
        menuItemAlbumRedoJS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAlbumRedoJSActionPerformed(evt);
            }
        });
        menuAlbum.add(menuItemAlbumRedoJS);
        menuAlbum.add(menuSeparadorAlbum1);

        menuItemAlbumUp.setText("Enviar Album");
        menuItemAlbumUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAlbumUpActionPerformed(evt);
            }
        });
        menuAlbum.add(menuItemAlbumUp);

        menuItemAlbumDown.setText("Receber Album");
        menuItemAlbumDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAlbumDownActionPerformed(evt);
            }
        });
        menuAlbum.add(menuItemAlbumDown);
        menuAlbum.add(menuSeparadorAlbum2);

        menuItemAlbumRedoThumbs.setText("Refaz Thumbs");
        menuAlbum.add(menuItemAlbumRedoThumbs);

        menuItemAlbumDelete.setText("Apagar Album");
        menuAlbum.add(menuItemAlbumDelete);

        setName("PainelWebFotos"); // NOI18N
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(painelPesquisa, gridBagConstraints);
        painelPesquisa.addPopupMouseListener((AcaoPopup) ApplicationContextResource.getBean("acaoPopup"));

        painelAlbuns.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        painelAlbuns.setPreferredSize(new java.awt.Dimension(462, 150));
        painelAlbuns.setRequestFocusEnabled(false);
        painelAlbuns.setLayout(new java.awt.BorderLayout());

        scrAlbuns.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                tbAlbunsChanged(evt);
            }
        });

        tbAlbuns.setModel(new TableSorter(TableModelAlbum.getModel(), tbAlbuns.getTableHeader()));
        tbAlbuns.setToolTipText("Use o botão direito para mais opções");
        tbAlbuns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAlbunsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbAlbunsPopupCalled(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbAlbunsPopupCalled(evt);
            }
        });
        scrAlbuns.setViewportView(tbAlbuns);

        painelAlbuns.add(scrAlbuns, java.awt.BorderLayout.CENTER);

        lblTabelaInfo.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
        lblTabelaInfo.setText("0 álbuns encontrados");
        painelAlbuns.add(lblTabelaInfo, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(painelAlbuns, gridBagConstraints);

        painelDadosAlbum.setLayout(new javax.swing.BoxLayout(painelDadosAlbum, javax.swing.BoxLayout.LINE_AXIS));

        painelInfoAlbum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        painelInfoAlbum.setMinimumSize(new java.awt.Dimension(500, 250));
        painelInfoAlbum.setPreferredSize(new java.awt.Dimension(500, 300));
        painelInfoAlbum.setLayout(new java.awt.GridBagLayout());

        lblAlbum.setText("Album:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblAlbum, gridBagConstraints);

        txtTitulo.setName("txtTitulo"); // NOI18N
        txtTitulo.setPreferredSize(new java.awt.Dimension(477, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(txtTitulo, gridBagConstraints);

        lblCategoria.setText("Categoria:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblCategoria, gridBagConstraints);

        lstCategoriasAlbum.setModel(new javax.swing.DefaultComboBoxModel(Album.getAlbum().getCategoriasArray()));
        lstCategoriasAlbum.setName("lstCategoriasAlbum"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lstCategoriasAlbum, gridBagConstraints);

        buttonAddCategory.setIconPrefix("plus");
        buttonAddCategory.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonAddCategory.setName("buttonAddCategory"); // NOI18N
        buttonAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(buttonAddCategory, gridBagConstraints);

        lblData.setText("Data:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblData, gridBagConstraints);

        txtData.setMinimumSize(new java.awt.Dimension(11, 22));
        txtData.setPreferredSize(new java.awt.Dimension(72, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(txtData, gridBagConstraints);

        lblDescricao.setText("Descrição:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(lblDescricao, gridBagConstraints);

        scrDescricao.setAutoscrolls(true);

        txtDescricao.setLineWrap(true);
        txtDescricao.setWrapStyleWord(true);
        txtDescricao.setName("txtDescricao"); // NOI18N
        scrDescricao.setViewportView(txtDescricao);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(scrDescricao, gridBagConstraints);

        tbFotos.setToolTipText("Use o botão direito para mais opções");
        tbFotos.setName("tbFotos"); // NOI18N
        tbFotos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbFotosPopupCalled(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbFotosPopupCalled(evt);
            }
        });
        scrFotos.setViewportView(tbFotos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelInfoAlbum.add(scrFotos, gridBagConstraints);

        painelDadosAlbum.add(painelInfoAlbum);

        painelFormFoto.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        painelFormFoto.setMaximumSize(new java.awt.Dimension(210, 2147483647));
        painelFormFoto.setMinimumSize(new java.awt.Dimension(210, 24));
        painelFormFoto.setPreferredSize(new java.awt.Dimension(210, 24));
        painelFormFoto.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelFormFoto.add(painelFoto, gridBagConstraints);

        lblLegenda.setText("Legenda e crédito:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelFormFoto.add(lblLegenda, gridBagConstraints);

        scrLegenda.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrLegenda.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txtLegenda.setLineWrap(true);
        txtLegenda.setWrapStyleWord(true);
        txtLegenda.setName("txtLegenda"); // NOI18N
        txtLegenda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLegendaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLegendaFocusLost(evt);
            }
        });
        scrLegenda.setViewportView(txtLegenda);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelFormFoto.add(scrLegenda, gridBagConstraints);

        lstCreditos.setModel(new javax.swing.DefaultComboBoxModel(net.sf.webphotos.PhotoDTO.getCreditosArray()));
        lstCreditos.setName("lstCreditos"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelFormFoto.add(lstCreditos, gridBagConstraints);

        buttonAddCredits.setIconPrefix("plus");
        buttonAddCredits.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonAddCredits.setName("buttonAddCredits"); // NOI18N
        buttonAddCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddCreditsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelFormFoto.add(buttonAddCredits, gridBagConstraints);

        painelDadosAlbum.add(painelFormFoto);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.5;
        add(painelDadosAlbum, gridBagConstraints);

        painelControle.setMaximumSize(new java.awt.Dimension(32767, 73));
        painelControle.setMinimumSize(new java.awt.Dimension(710, 73));
        painelControle.setLayout(new java.awt.GridBagLayout());

        scrLog.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrLog.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrLog.setAutoscrolls(true);
        scrLog.setMaximumSize(new java.awt.Dimension(32767, 63));
        scrLog.setMinimumSize(new java.awt.Dimension(24, 63));
        scrLog.setPreferredSize(new java.awt.Dimension(22, 63));

        txtLog.setFont(new java.awt.Font("Courier", 0, 11)); // NOI18N
        scrLog.setViewportView(txtLog);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        painelControle.add(scrLog, gridBagConstraints);

        painelToolBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        painelToolBar.setLayout(new java.awt.GridBagLayout());

        btFTP.setIconPrefix("ftp");
        btFTP.setToolTipText("Realiza a trasferência dos Álbuns Marcados");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelToolBar.add(btFTP, gridBagConstraints);

        btUpload.setIconPrefix("up");
        btUpload.setToolTipText("Marca o Álbum para Upload");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelToolBar.add(btUpload, gridBagConstraints);

        btDownload.setIconPrefix("down");
        btDownload.setToolTipText("Marca o Álbum para Download");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelToolBar.add(btDownload, gridBagConstraints);

        btAdicionarFotos.setIconPrefix("camera");
        btAdicionarFotos.setName("buttonAddPhotos"); // NOI18N
        btAdicionarFotos.setToolTipText("Adiciona uma nova foto ao Álbum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelToolBar.add(btAdicionarFotos, gridBagConstraints);

        btAlterar.setText("alterar");
        btAlterar.setToolTipText("Efetiva as alterações do álbum");
        btAlterar.setActionCommand(ACAO_ALTERAR);
        btAlterar.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelToolBar.add(btAlterar, gridBagConstraints);

        btNovo.setText("Adicionar");
        btNovo.setToolTipText("Criar novo álbum");
        btNovo.setActionCommand(ACAO_NOVO);
        btNovo.setName("btNovo"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        painelToolBar.add(btNovo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        painelControle.add(painelToolBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        add(painelControle, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt the ActionEvent triggered
     */
    private void menuItemAlbumRedoJSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAlbumRedoJSActionPerformed

        (new SwingWorker<Void, Object>() {
            @Override
            protected Void doInBackground() throws Exception {
                String caminhoAlbum;
                FileWriter out;

                setCursorWait(true);
                /**
                 * Guarda o álbum original para recarregá-lo
                 */
                int albumAtual = Album.getAlbum().getAlbumID();
                int[] rowsID = tbAlbuns.getSelectedRows();
                for (int rowID : rowsID) {
                    log.info("Gravando arquivo JS do álbum: " + tbAlbuns.getValueAt(rowID, 0).toString());
                    Album.getAlbum().loadAlbum(Integer.parseInt(tbAlbuns.getValueAt(rowID, 0).toString()));
                    caminhoAlbum = Util.getAlbunsRoot().getPath() + File.separator + Album.getAlbum().getAlbumID();
                    try {
                        out = new FileWriter(caminhoAlbum + File.separator + Album.getAlbum().getAlbumID() + ".js");
                        out.write(Album.getAlbum().toJavaScript());
                        out.flush();
                        out.close();

                        log.info("Arquivo JS gravado.");
                    } catch (IOException ex) {
                        log.error("Error trying to write a JS File", ex);
                    }

                }
                Album.getAlbum().loadAlbum(albumAtual);
                setCursorWait(false);

                return null;
            }
        }).execute();

    }//GEN-LAST:event_menuItemAlbumRedoJSActionPerformed

    /**
     *
     * @param evt the ActionEvent triggered
     */
    private void menuItemAlbumRedoXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAlbumRedoXMLActionPerformed

        (new SwingWorker<Void, Object>() {
            @Override
            protected Void doInBackground() throws Exception {
                String caminhoAlbum;
                FileWriter out;

                setCursorWait(true);
                /**
                 * Guarda o álbum original para recarregá-lo
                 */
                int albumAtual = Album.getAlbum().getAlbumID();
                int[] rowsID = tbAlbuns.getSelectedRows();
                for (int rowID : rowsID) {
                    log.info("Gravando arquivo XML do álbum: " + tbAlbuns.getValueAt(rowID, 0).toString());
                    Album.getAlbum().loadAlbum(Integer.parseInt(tbAlbuns.getValueAt(rowID, 0).toString()));
                    caminhoAlbum = Util.getAlbunsRoot().getPath() + File.separator + Album.getAlbum().getAlbumID();
                    try {
                        out = new FileWriter(caminhoAlbum + File.separator + Album.getAlbum().getAlbumID() + ".xml");
                        out.write(Album.getAlbum().toXML());
                        out.flush();
                        out.close();

                        log.info("Arquivo XML gravado.");
                    } catch (IOException ex) {
                        log.error("Error trying to write a XML File", ex);
                    }

                }
                Album.getAlbum().loadAlbum(albumAtual);
                setCursorWait(false);
                return null;
            }
        }).execute();

    }//GEN-LAST:event_menuItemAlbumRedoXMLActionPerformed

    private void menuItemAlbumDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAlbumDownActionPerformed
        PainelWebFotos.marcaAlbunsFTP(2);
    }//GEN-LAST:event_menuItemAlbumDownActionPerformed

    private void menuItemAlbumUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAlbumUpActionPerformed
        PainelWebFotos.marcaAlbunsFTP(1);
    }//GEN-LAST:event_menuItemAlbumUpActionPerformed

    private void tbAlbunsPopupCalled(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAlbunsPopupCalled
        if (tbAlbuns.getSelectedRowCount() <= 1) {
            int selecao = tbAlbuns.rowAtPoint(evt.getPoint());
            tbAlbuns.setRowSelectionInterval(selecao, selecao);
        }
        if (evt.isPopupTrigger()) {
            menuAlbum.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tbAlbunsPopupCalled

    private void menuItemFotoDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFotoDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuItemFotoDeleteActionPerformed

    private void menuItemFotoRedoThumbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFotoRedoThumbsActionPerformed

        (new SwingWorker<Void, Object>() {
            @Override
            protected Void doInBackground() throws Exception {
                setCursorWait(true);
                int[] rowsID = tbFotos.getSelectedRows();
                for (int rowID : rowsID) {
                    PhotoDTO fotoSelecionada = Album.getAlbum().getFoto(Integer.parseInt(tbFotos.getValueAt(rowID, 0).toString()));
                    String caminhoAlbum = Util.getAlbunsRoot().getPath() + File.separator + Album.getAlbum().getAlbumID();
                    String caminhoArquivo = caminhoAlbum + File.separator + fotoSelecionada.getFotoID() + ".jpg";
                    log.debug("Foto: " + caminhoArquivo + " " + Integer.parseInt(tbFotos.getValueAt(tbFotos.getSelectedRow(), 0).toString()));
                    Thumbnail.makeThumbs(caminhoArquivo);
                }
                setCursorWait(false);
                return null;
            }
        }).execute();

    }//GEN-LAST:event_menuItemFotoRedoThumbsActionPerformed

    private void menuItemFotoDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFotoDownActionPerformed
        PainelWebFotos.marcaFotosFTP(2);
    }//GEN-LAST:event_menuItemFotoDownActionPerformed

    private void menuItemFotoUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFotoUpActionPerformed
        PainelWebFotos.marcaFotosFTP(1);
    }//GEN-LAST:event_menuItemFotoUpActionPerformed

    private void txtLegendaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLegendaFocusLost
        PhotoDTO f;
        String nomeArquivoNovo;
        // obtém o objeto foto
        try {
            // para arquivos cadastrados
            int fID = Integer.parseInt(tbFotos.getModel().getValueAt(indiceFoto, 0).toString());
            f = Album.getAlbum().getFoto(fID);
        } catch (Exception ex) {
            // para novos arquivos
            nomeArquivoNovo = (String) tbFotos.getModel().getValueAt(indiceFoto, 0);
            f = Album.getAlbum().getFoto(nomeArquivoNovo);
        }
        // aplica o texto da legenda ao objeto PhotoDTO e atualiza
        f.setLegenda(txtLegenda.getText());
        TableModelFoto.getModel().update();
        TableModelFoto.getModel().fireTableCellUpdated(indiceFoto, 1);
    }//GEN-LAST:event_txtLegendaFocusLost

    private void txtLegendaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLegendaFocusGained
        indiceFoto = tbFotos.getSelectedRow();
    }//GEN-LAST:event_txtLegendaFocusGained

    private void tbFotosPopupCalled(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFotosPopupCalled
        if (tbFotos.getSelectedRowCount() <= 1) {
            int selecao = tbFotos.rowAtPoint(evt.getPoint());
            tbFotos.setRowSelectionInterval(selecao, selecao);
        }
        if (evt.isPopupTrigger()) {
            menuFoto.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tbFotosPopupCalled

    private void tbAlbunsChanged(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tbAlbunsChanged
        Util.ajustaLargura(tbAlbuns, Util.getProperty("colunas1"));
    }//GEN-LAST:event_tbAlbunsChanged

    private void tbAlbunsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAlbunsMouseClicked
        tbAlbunsItemSelected();
    }//GEN-LAST:event_tbAlbunsMouseClicked

    private void buttonAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddCategoryActionPerformed
        String categoryName = JOptionPane.showInputDialog(this, "Type the new category name", "New Category", JOptionPane.INFORMATION_MESSAGE);

        if (categoryName.isEmpty()) {
            return;
        }

        CategoryVO categoryVO = new CategoryVO(categoryName);

        CategoryDAO categoryDAO = (CategoryDAO) ApplicationContextResource.getBean("categoryDAO");
        try {
            categoryDAO.save(categoryVO);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Can't add category, see aplication log for details", "Error", JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(PainelWebFotos.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        PainelWebFotos.montagemComboPesquisa(Boolean.TRUE);
    }//GEN-LAST:event_buttonAddCategoryActionPerformed

    private void buttonAddCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddCreditsActionPerformed
        String creditsName = JOptionPane.showInputDialog(this, "Type the new credits name", "New Credits", JOptionPane.INFORMATION_MESSAGE);

        if (creditsName.isEmpty()) {
            return;
        }

        CreditsVO creditsVO = new CreditsVO(creditsName);

        CreditsDAO creditsDAO = (CreditsDAO) ApplicationContextResource.getBean("creditsDAO");

        try {
            creditsDAO.save(creditsVO);

            // TODO format as EventHandling
            PhotoDTO.populaCreditos();
            populateCreditsComboBox();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Can't add credits, see aplication log for details", "Error", JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(PainelWebFotos.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }//GEN-LAST:event_buttonAddCreditsActionPerformed

    /**
     * Retorna a instância de PainelWebFotos. Caso não exista o objeto,
     * instancia um.
     *
     * @return Retorna um painel.
     */
    public static PainelWebFotos getInstance() {
        if (janela == null) {
            janela = new PainelWebFotos();
        }
        return janela;
    }

    /**
     * Recebe um comando e o adiciona com as fotos no FTP. Faz uma espécie de
     * <B>foreach</B> para buscar as fotos selecionadas e controla pelo valor do
     * índice da foto selecionada. Adiciona, para cada foto, o comando
     * especificado no FTP através do método
     * {@link net.sf.webphotos.util.CacheFTP#addCommand(int,int,int) addCommand}.
     *
     * @param comando Comando.
     */
    public static void marcaFotosFTP(int comando) {
        try {
            for (int indiceFotoSelecionada : tbFotos.getSelectedRows()) {
                PhotoDTO fotoSelecionada = Album.getAlbum().getFotos()[indiceFotoSelecionada];
                CacheFTP.getCache().addCommand(comando, Album.getAlbum().getAlbumID(), fotoSelecionada.getFotoID());
            }
        } catch (Exception e) {
            log.error("Error marking Photos", e);
        }
    }

    /**
     * Recebe um comando e o adiciona com as fotos no FTP. Faz uma espécie de
     * <B>foreach</B> para buscar as fotos selecionadas e controla pelo valor do
     * índice do albúm selecionado. Adiciona, para cada foto, o comando
     * especificado no FTP através do método
     * {@link net.sf.webphotos.util.CacheFTP#addCommand(int,int,int) addCommand}.
     *
     * @param comando Comando.
     */
    public static void marcaAlbunsFTP(int comando) {
        try {
            for (int indiceAlbumSelecionado : tbAlbuns.getSelectedRows()) {
                CacheFTP.getCache().addCommand(comando, Integer.parseInt(tbAlbuns.getValueAt(indiceAlbumSelecionado, 0).toString()), 0);
            }
        } catch (Exception e) {
            log.error("Error marking Albuns", e);
        }
    }

    /**
     * Bad Design. Move it's responsabilites to another place.
     *
     * @throws Exception
     */
    private static void rotinasExtras() throws Exception {
        /* Extras - Ações */
        // TECLAS DE ATALHO GLOBAL

        // ACAO EXCLUIR ALBUM
        Action acaoExcluirAlbum = (Action) ApplicationContextResource.getBean("acaoExcluirAlbum");
        tbAlbuns.registerKeyboardAction(acaoExcluirAlbum,
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0),
                javax.swing.JComponent.WHEN_FOCUSED);

        // ACAO ADICIONAR FOTOS
        btAdicionarFotos.addActionListener(new AcaoAdicionarFoto(tbFotos, lstCreditosTabelaFotos, "Adicionar fotos no álbum"));

        // ACAO EXCLUIR FOTO
        javax.swing.Action acaoExcluirFoto = new AcaoExcluirFoto(tbFotos);
        tbFotos.registerKeyboardAction(acaoExcluirFoto,
                javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0),
                javax.swing.JComponent.WHEN_FOCUSED);

        // ACAO ALTERAR ALBUM E NOVO
        javax.swing.Action acaoAlterarAlbum = new AcaoAlterarAlbum(btNovo, btAlterar);
        btAlterar.addActionListener(acaoAlterarAlbum);
        btNovo.addActionListener(acaoAlterarAlbum);

        // lstCategoriasAlbum... somente muda o flag alterado
        lstCategoriasAlbum.addItemListener(new AcaoItemListener());

        // tecla tab na descrição, pula pro botão
        txtDescricao.registerKeyboardAction(null,
                KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), JComponent.WHEN_FOCUSED);

        // ouvinte para créditos é adicionado e removido no metodo carregaFoto()
        // primeira adição do ouvinte - para ser retirado da primeira vez
        AcaoItemListener acaoItemListener = new AcaoItemListener(tbFotos);
        lstCreditos.addItemListener(acaoItemListener);
        lstCreditosTabelaFotos.addItemListener(acaoItemListener);

        /* Extras - Util */
        Util.setLoggingTextArea(txtLog);
        Util.ajustaLargura(tbAlbuns, Util.getConfig().getString("colunas1"));

        /* Extras - Tabelas */
        apresentaNumReg();
        atualizaTabelaFotos();
        montagemComboPesquisa(Boolean.FALSE);

        // prepara outras variáveis utilizadas pelo sistema
        DocumentListener acaoDocumentListener = (DocumentListener) ApplicationContextResource.getBean("acaoDocumentListener");

        txtTitulo.getDocument().addDocumentListener(acaoDocumentListener);
        txtData.getDocument().addDocumentListener(acaoDocumentListener);
        txtDescricao.getDocument().addDocumentListener(acaoDocumentListener);
        txtLegenda.getDocument().addDocumentListener(acaoDocumentListener);

        // Adiciona uma mascara
        mascaraData.install(txtData);

        // Ouvinte para itens selecionados (Fotos)
        tbFotos.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                javax.swing.ListSelectionModel lsm =
                        (javax.swing.ListSelectionModel) e.getSource();
                if (!lsm.isSelectionEmpty()) {
                    //selectedRow is selected
                    PainelWebFotos.getInstance().carregaFoto();
                }
            }
        });

        // Ouvinte para mudança nos dados (Fotos)
        tbFotos.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                Util.ajustaLargura(tbFotos, Util.getProperty("colunas2"));
            }
        });

        // Ouvinte para itens selecionados (Álbuns)
        tbAlbuns.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                javax.swing.ListSelectionModel lsm =
                        (javax.swing.ListSelectionModel) e.getSource();
                if (!lsm.isSelectionEmpty()) {
                    //selectedRow is selected
                    PainelWebFotos.getInstance().tbAlbunsItemSelected();
                }
            }
        });

        // Ouvinte para mudança nos dados (Álbuns)
        tbAlbuns.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                Util.ajustaLargura(tbAlbuns, Util.getProperty("colunas1"));
            }
        });

        // começa com todos os controles de pauta desligados
        resetAlbum();
        onoffPauta(false);
    }

    /**
     * Seta o <I>cursor</I> em espera. Recebe uma flag para setar o valor, caso
     * seja <I>true</I>, mantém o cursor em espera, caso o valor seja
     * <I>false</I> seta o cursor com o valor <U>null</U>.
     *
     * @param valor Flag para setar o cursor.
     */
    public static void setCursorWait(boolean valor) {
        if (valor) {
            PainelWebFotos.getInstance().setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        } else {
            PainelWebFotos.getInstance().setCursor(null);
        }
    }

    /**
     * Sensitividade a alterações. Seta a flag documentoAlterado para
     * <I>false</I> e desabilita o botão alterar. TODO: Reformular este sistema.
     * Usar eventos customizados. Vide pacote sync.
     */
    public static void alteracaoFinalizada() {
        documentoAlterado = false;
        btAlterar.setEnabled(false);
    }

    /**
     * Detecta alterações. Checa pela flag controlarAlteracoes, caso seja
     * <I>true</I>, faz comparações dos valores do albúm e se tudo corresponder,
     * chama o método
     * {@link net.sf.webphotos.gui.PainelWebFotos#alteracaoFinalizada() alteracaoFinalizada()}.
     * Por último seta documentoAlterado como <I>true</I> e habilita o botão
     * alterar.
     */
    public static void alteracaoDetectada() {
        if (controlarAlteracoes) {
            if (Album.getAlbum().getNmAlbum().equals(txtTitulo.getText())
                    && Album.getAlbum().getDtInsercao().equals(txtData.getText())
                    && Album.getAlbum().getDescricao().equals(txtDescricao.getText())
                    && Album.getAlbum().getCategoriaID() == Album.getAlbum().getLstCategoriasID(lstCategoriasAlbum.getSelectedItem().toString())
                    && Album.getAlbum().toString().equals(ultimoAlbum)) {
                alteracaoFinalizada();
                return;
            }
            documentoAlterado = true;
            btAlterar.setEnabled(true);
        }
    }

    /**
     * Seta a flag detectarAlteracoes com o valor recebido como parâmetro. Para
     * ser utilizado posteriormente no método
     * {@link net.sf.webphotos.gui.PainelWebFotos#alteracaoDetectada() alteracaoDetectada()}.
     *
     * @param valor Variável lógica.
     */
    public static void detectarAlteracoes(boolean valor) {
        controlarAlteracoes = valor;
    }

    /**
     * FIM SENSITIVIDADE À ALTERAÇÕES
     */
    private void tbAlbunsItemSelected() {
        // se estiver editando, devemos finalizar a edição (tbFotos)
        if (tbFotos.isEditing()) {
            tbFotos.removeEditor();
        }

        // Estavamos editando um novo álbum ?
        if (btNovo.getActionCommand().equals(ACAO_FINALIZAR)) {
            Object[] opcoes = {"Retornar", "Abandonar álbum"};
            Object valorInicial = opcoes[0];

            int retorno = javax.swing.JOptionPane.showOptionDialog(null,
                    "O álbum que você estava criando não foi finalizado",
                    "Cancelar criação de álbum ?",
                    javax.swing.JOptionPane.OK_OPTION,
                    javax.swing.JOptionPane.QUESTION_MESSAGE,
                    null,
                    opcoes,
                    valorInicial);

            if (retorno == 0) { // usuário pediu para retornar
                tbAlbuns.setRowSelectionInterval(linhaSelecionadaAlbum, linhaSelecionadaAlbum);
                return;
            } else {
                botaoCancelar();
            }
        }

        if (documentoAlterado) {
            if (checarAlteracoes() == 0) { // usuário pediu para retornar
                tbAlbuns.setRowSelectionInterval(linhaSelecionadaAlbum, linhaSelecionadaAlbum);
                return;
            }
        }

        setCursorWait(true);
        linhaSelecionadaAlbum = tbAlbuns.getSelectedRow();
        Object indice = tbAlbuns.getModel().getValueAt(linhaSelecionadaAlbum, 0);
        int i = Integer.parseInt(indice.toString());
        Album.getAlbum().loadAlbum(i);
        ultimoAlbum = Album.getAlbum().toString();
        carregaAlbum();
        // seleciona a primeira foto e carrega
        tbFotos.setRowSelectionInterval(0, 0);
        carregaFoto();
        setCursorWait(false);
    }

    /**
     * Atualiza o álbum corrente com as informações presentes nas caixa de
     * texto. Checar se os campos foram preenchidos, e se tudo estiver ok,
     * atualiza o albúm. Retorna uma variável lógica para confirmação. Função
     * utilizada em
     * {@link net.sf.webphotos.acao.AcaoAlterarAlbum AcaoAlterarAlbum}.
     *
     * @return Retorna uma variável lógica.
     */
    public static boolean atualizaAlbum() {
        Album album = Album.getAlbum();
        PhotoDTO[] fotos = album.getFotos();
        String titulo = txtTitulo.getText();
        String descricao = txtDescricao.getText();
        String data = txtData.getText();
        int categoriaIndice = lstCategoriasAlbum.getSelectedIndex();
        String msgErro = "";
        java.text.SimpleDateFormat dataBR = new java.text.SimpleDateFormat("dd/MM/yy");
        dataBR.setLenient(false);

        // checar se os campos foram preenchidos
        if (titulo.length() < 1) {
            msgErro = "\nÁlbum";
        }
        if (descricao.length() < 1) {
            msgErro = msgErro + "\nDescrição";
        }
        if (categoriaIndice < 1) {
            msgErro = msgErro + "\nCategoria";
        }
        // checagem especial para o campo data

        try {
            dataBR.parse(data);
        } catch (Exception e) {
            msgErro = "\nData (" + data + ") inválida";
        }

        // checar se os campos foram preenchidos para as fotos
        PhotoDTO f;
        if (fotos.length == 0) {
            msgErro = msgErro + "\nNão existem fotos cadastradas nesse álbum";
        }
        for (int i = 0; i < fotos.length; i++) {
            f = fotos[i];
            if (f.getCreditoID() == 0 || f.getLegenda().length() == 0) {
                msgErro = msgErro + "\ninformação sobre foto na linha " + (i + 1);
            }
        }

        if (msgErro.length() > 0) {
            javax.swing.JOptionPane.showMessageDialog(null, "Preencha corretamente os campos\n" + msgErro, "Erro no preenchimento", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // tudo ok... atualiza album
        album.setNmAlbum(titulo);
        album.setDescricao(descricao);
        album.setDtInsercao(data);
        album.setCategoriaID(album.getLstCategoriasID(lstCategoriasAlbum.getSelectedItem().toString()));

        return true;
    }

    // apresenta o álbum corrente na tela
    private void carregaAlbum() {
        // habilita os controles
        controlarAlteracoes = false;
        onoffPauta(true);
        resetFoto();
        onoffFoto(false);

        Album b = Album.getAlbum();

        albumID = b.getAlbumID();
        txtTitulo.setText(b.getNmAlbum());
        txtTitulo.setCaretPosition(0);
        txtData.setText(b.getDtInsercao());
        txtDescricao.setText(b.getDescricao());
        txtDescricao.setCaretPosition(0);
        // seleciona categoria
        int i = Album.getAlbum().getLstCategoriasIndex(b.getCategoriaID());
        lstCategoriasAlbum.setSelectedIndex(i + 1);

        // atualiza a tabela de fotos
        atualizaTabelaFotos();
        alteracaoFinalizada();
        controlarAlteracoes = true;
    }

    private void carregaFoto() {
        int indiceCredito;
        Object indice = tbFotos.getModel().getValueAt(tbFotos.getSelectedRow(), 0);
        String caminho;
        PhotoDTO f;
        int fotoID;
        // pode ser uma foto que acabou de ser adicionada
        try {
            fotoID = Integer.parseInt(indice.toString());
            f = Album.getAlbum().getFoto(fotoID);
            caminho = BancoImagem.getLocalPath(albumID) + File.separator + "_b" + fotoID + ".jpg";
            indiceCredito = PhotoDTO.getLstCreditosIndex(f.getCreditoNome()) + 1;
        } catch (NumberFormatException e) {
            f = Album.getAlbum().getFoto(indice.toString());
            caminho = f.getCaminhoArquivo();
            // pode ser que o usuário já tenha aplicado um crédito
            if (f.getCreditoID() == 0) {
                indiceCredito = 0;
            } else {
                indiceCredito = PhotoDTO.getLstCreditosIndex(f.getCreditoNome()) + 1;
            }
        }

        if (f == null) {
            return;
        }
        painelFoto.loadImage(caminho);

        // aplica o texto nas caixas
        controlarAlteracoes = false;
        txtLegenda.setText(f.getLegenda());
        txtLegenda.setCaretPosition(0);
        log.debug("indiceCredito: " + indiceCredito);
        try {
            lstCreditos.setSelectedIndex(indiceCredito);
        } catch (Exception e) {
            log.error("Contagem: " + lstCreditos.getItemCount(), e);
        }
        controlarAlteracoes = true;
        onoffFoto(true);

        painelFoto.getLblFotoInfo().setText((f.getAltura() == 0) ? "?? x ??" : f.getLargura() + "x" + f.getAltura());
    }

    private int checarAlteracoes() {
        if (documentoAlterado) {
            Object[] opcoes = {"Retornar", "Abandonar alterações"};
            Object valorInicial = opcoes[0];

            return javax.swing.JOptionPane.showOptionDialog(null,
                    "Houve alterações neste álbum que não foram salvas.\n\nPara salvar as alterações clique em \"Retornar\" e finalize suas alterações.\nPara prosseguir sem salvar, clique em \"Abandonar alterações\"\n",
                    "Cancelar alterações ?",
                    javax.swing.JOptionPane.OK_OPTION,
                    javax.swing.JOptionPane.QUESTION_MESSAGE,
                    null,
                    opcoes,
                    valorInicial);
        }
        return 1;
    }

    private static void onoffPauta(boolean valor) {
        txtTitulo.setEnabled(valor);
        txtData.setEnabled(valor);
        lstCategoriasAlbum.setEnabled(valor);
        txtDescricao.setEnabled(valor);
        btAdicionarFotos.setEnabled(valor);
    }

    private static void onoffFoto(boolean valor) {
        txtLegenda.setEnabled(valor);
        lstCreditos.setEnabled(valor);
    }

    /**
     * Retorna o número de registros encontrados. Checa se existe uma, mais de
     * uma ou nenhuma linha selecionada, e apresenta o total de registros.
     */
    public static void apresentaNumReg() {
        int numReg = TableModelAlbum.getModel().getRowCount();
        String msg;
        if (numReg == 0) {
            msg = "Nenhum ábum encontrado.  Para ver outros álbuns, deixe a caixa de texto \"palavra(s)\" vazia e clique em Pesquisar.";
        } else if (numReg == 1) {
            msg = "1 álbum encontrado";
        } else {
            msg = (numReg + " álbuns encontrados");
        }
        lblTabelaInfo.setText(msg);
    }

    private static void atualizaTabelaFotos() {
        TableModelFoto.getModel().update();
        TableModelFoto.getModel().fireTableDataChanged();
        //TableModelFoto.getModel().addMouseListener(tbFotos);
        //tbFotos.setModel(TableModelFoto.getModel());
        tbFotos.setModel(new TableSorter(TableModelFoto.getModel(), tbFotos.getTableHeader()));

        // ajusta colunas
        tbFotos.getColumnModel().getColumn(2).setCellEditor(new javax.swing.DefaultCellEditor(lstCreditosTabelaFotos));
        Util.ajustaLargura(tbFotos, Util.getConfig().getString("colunas2"));

        tbFotos.repaint();
        painelFoto.clear();
    }

    /**
     * Prepara a interface para criação de um novo álbum. Seta o botão btNovo
     * com a função <B>finalizar</B> e o botão btAlterar com a função
     * <B>cancelar</B>. Ao implementar o albúm, já chama o método
     * {@link net.sf.webphotos.acao.AcaoAdicionarFoto#actionPerformed(ActionEvent) actionPerformed(ActionEvent e)}
     * para adicionar foto.
     */
    public static void botaoNovo() {
        detectarAlteracoes(false);
        btAlterar.setText("Cancelar");
        btAlterar.setActionCommand(ACAO_CANCELAR);
        btAlterar.setToolTipText("Cancela a criação do álbum");
        btNovo.setText("Finalizar");
        btNovo.setActionCommand(ACAO_FINALIZAR);
        btNovo.setToolTipText("Adiciona o álbum ao banco de dados");
        btAlterar.setEnabled(true);
        resetAlbum();
        resetFoto();
        onoffPauta(true);
        try {
            java.text.SimpleDateFormat dataBR = new java.text.SimpleDateFormat("dd/MM/yy");
            txtData.setText(dataBR.format(new java.util.Date()));
        } catch (Exception e) {
            Util.log("ERRO: " + e.getMessage());
        }

        AcaoAdicionarFoto a = new AcaoAdicionarFoto(tbFotos, lstCreditosTabelaFotos, "Criando novo álbum - Selecione os arquivos");
        a.actionPerformed(null);

        txtTitulo.requestFocus(true);
    }

    /**
     * Prepara a interface do botão cancelar. Seta o botão btNovo com a função
     * <B>novo</B> e o botão btAlterar com a função <B>alterar</B>.
     */
    public static void botaoCancelar() {
        btAlterar.setText("Alterar");
        btAlterar.setActionCommand(ACAO_ALTERAR);
        btAlterar.setToolTipText("Efetiva as alterações do álbum");
        btNovo.setText("Novo");
        btNovo.setActionCommand(ACAO_NOVO);
        btNovo.setToolTipText("Criar novo álbum");
        btAlterar.setEnabled(false);
        resetAlbum();
        resetFoto();
        onoffPauta(false);
        alteracaoFinalizada();
        detectarAlteracoes(true);
    }

    /**
     * Prepara a interface do botão finalizar. Seta o botão btNovo com a função
     * <B>novo</B> e o botão btAlterar com a função <B>alterar</B>.
     */
    public static void botaoFinalizar() {
        btAlterar.setText("Alterar");
        btAlterar.setActionCommand(ACAO_ALTERAR);
        btAlterar.setToolTipText("Efetiva as alterações do álbum");
        btNovo.setText("Novo");
        btNovo.setActionCommand(ACAO_NOVO);
        btNovo.setToolTipText("Criar novo álbum");
        btAlterar.setEnabled(false);
        resetAlbum();
        resetFoto();
        alteracaoFinalizada();
        detectarAlteracoes(true);
        onoffPauta(false);
    }

    /**
     * Limpa painel de foto com o método
     * {@link net.sf.webphotos.gui.PainelFoto#clear() clear()}, apaga os valores
     * de txtLegenda, lstCredito e bloqueia os controles.
     */
    public static void resetFoto() {
        controlarAlteracoes = false;
        txtLegenda.setText("");
        try {
            lstCreditos.setSelectedIndex(0);
        } catch (Exception e) {
            Util.log("[PainelWebPhotos.resetFoto()]/ERRO: " + e.getMessage());
        }
        painelFoto.clear();
        painelFoto.getLblFotoInfo().setText("");
        onoffFoto(false);
        controlarAlteracoes = true;
    }

    /**
     * Limpa todos os valores em albúm. Limpa as variáveis e os controles.
     */
    public static void resetAlbum() {
        // limpa controles
        Album.getAlbum().clear();
        txtTitulo.setText("");
        txtData.setText("");
        try {
            lstCategoriasAlbum.setSelectedIndex(0);
        } catch (Exception e) {
            Util.log("[PainelWebPhotos.resetAlbum()]/ERRO: " + e.getMessage());
        }
        txtDescricao.setText("");
        txtLegenda.setText("");
        try {
            lstCreditos.setSelectedIndex(0);
        } catch (Exception e) {
            Util.log("[PainelWebPhotos.resetAlbum()]/ERRO: " + e.getMessage());
        }

        TableModelFoto.getModel().update();
        TableModelFoto.getModel().fireTableDataChanged();
        tbFotos.setModel(new TableSorter(TableModelFoto.getModel(), tbFotos.getTableHeader()));
        //tbFotos.setModel(TableModelFoto.getModel());
        tbFotos.repaint();
        painelFoto.clear();

        // desabilita tudo
        onoffFoto(false);
    }
    private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger(PainelWebFotos.class.getName());
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static net.sf.webphotos.gui.component.BotaoIcone btAdicionarFotos;
    private static javax.swing.JButton btAlterar;
    private static net.sf.webphotos.gui.component.BotaoIcone btDownload;
    private static net.sf.webphotos.gui.component.BotaoIcone btFTP;
    private static javax.swing.JButton btNovo;
    private static net.sf.webphotos.gui.component.BotaoIcone btUpload;
    private static net.sf.webphotos.gui.component.BotaoIcone buttonAddCategory;
    private static net.sf.webphotos.gui.component.BotaoIcone buttonAddCredits;
    private static javax.swing.JLabel lblAlbum;
    private static javax.swing.JLabel lblCategoria;
    private static javax.swing.JLabel lblData;
    private static javax.swing.JLabel lblDescricao;
    private static javax.swing.JLabel lblLegenda;
    private static javax.swing.JLabel lblTabelaInfo;
    private static javax.swing.JComboBox lstCategoriasAlbum;
    private static javax.swing.JComboBox lstCreditos;
    private static javax.swing.JComboBox lstCreditosTabelaFotos;
    private static javax.swing.JPopupMenu menuAlbum;
    private static javax.swing.JPopupMenu menuFoto;
    private static javax.swing.JMenuItem menuItemAlbumDelete;
    private static javax.swing.JMenuItem menuItemAlbumDown;
    private static javax.swing.JMenuItem menuItemAlbumRedoJS;
    private static javax.swing.JMenuItem menuItemAlbumRedoThumbs;
    private static javax.swing.JMenuItem menuItemAlbumRedoXML;
    private static javax.swing.JMenuItem menuItemAlbumUp;
    private static javax.swing.JMenuItem menuItemFotoDelete;
    private static javax.swing.JMenuItem menuItemFotoDown;
    private static javax.swing.JMenuItem menuItemFotoRedoThumbs;
    private static javax.swing.JMenuItem menuItemFotoUp;
    private static javax.swing.JSeparator menuSeparadorAlbum1;
    private static javax.swing.JSeparator menuSeparadorAlbum2;
    private static javax.swing.JSeparator menuSeparadorFoto;
    private static javax.swing.JPanel painelAlbuns;
    private static javax.swing.JPanel painelControle;
    private static javax.swing.JPanel painelDadosAlbum;
    private static javax.swing.JPanel painelFormFoto;
    private static net.sf.webphotos.gui.component.PainelFoto painelFoto;
    private static javax.swing.JPanel painelInfoAlbum;
    private static net.sf.webphotos.gui.component.PainelPesquisa painelPesquisa;
    private static javax.swing.JPanel painelToolBar;
    private static javax.swing.JScrollPane scrAlbuns;
    private static javax.swing.JScrollPane scrDescricao;
    private static javax.swing.JScrollPane scrFotos;
    private static javax.swing.JScrollPane scrLegenda;
    private static javax.swing.JScrollPane scrLog;
    private static javax.swing.JTable tbAlbuns;
    private static javax.swing.JTable tbFotos;
    private static javax.swing.JFormattedTextField txtData;
    private static javax.swing.JTextArea txtDescricao;
    private static javax.swing.JTextArea txtLegenda;
    private static javax.swing.JTextArea txtLog;
    private static javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
    // variaveis para sistema
    private int albumID;
    // linhas selecionada para tbAlbum e tbFoto
    private int linhaSelecionadaAlbum;
    private int indiceFoto;
    // armazena a representação string do último álbum para controlar alterações
    private static String ultimoAlbum;
    // controle de alteracoes
    private static boolean controlarAlteracoes;
    private static boolean documentoAlterado;
    // Máscara para data
    private static javax.swing.text.MaskFormatter mascaraData;

    /**
     * Retorna uma tabela de albúns.
     *
     * @return Retorna uma tabela.
     */
    public static javax.swing.JTable getTbAlbuns() {
        return tbAlbuns;
    }

    /**
     * Retorna uma lista de créditos.
     *
     * @return Retorna uma lista de créditos.
     */
    public static javax.swing.JComboBox getLstCreditos() {
        return lstCreditos;
    }

    /**
     * Retorna uma lista de créditos da tabela de fotos? Não possui utilização.
     * TODO: avaliar a exclusão desse método.
     *
     * @return Retorna uma lista de créditos.
     */
    public static javax.swing.JComboBox getLstCreditosTabelaFotos() {
        return lstCreditosTabelaFotos;
    }

    /**
     * Retorna uma tabela de fotos.
     *
     * @return Retorna uma tabela.
     */
    public static javax.swing.JTable getTbFotos() {
        return tbFotos;
    }

    /**
     * Retorna uma textarea de legenda.
     *
     * @return Retorna uma legenda.
     */
    public static javax.swing.JTextArea getTxtLegenda() {
        return txtLegenda;
    }

    /**
     * Retorna uma textarea de log.
     *
     * @return Retorna um log.
     */
    public static javax.swing.JTextArea getTxtLog() {
        return txtLog;
    }

    /**
     * Retorna uma {@link javax.swing.text.MaskFormatter máscara}. Utilizado na
     * função de rotinas extras da própria classe.
     *
     * @return Retorna uma máscara.
     */
    public static javax.swing.text.MaskFormatter getMascaraData() {
        return mascaraData;
    }

    /**
     * Seta um valor de {@link javax.swing.text.MaskFormatter máscara} para
     * mascaraData. Não é utilizado.
     *
     * @param aMascaraData Máscara.
     */
    public static void setMascaraData(javax.swing.text.MaskFormatter aMascaraData) {
        mascaraData = aMascaraData;
    }

    private void populateCreditsComboBox() {
        final DefaultComboBoxModel defaultComboBoxModel = new DefaultComboBoxModel(PhotoDTO.getCreditosArray());
        lstCreditos.setModel(defaultComboBoxModel);
        lstCreditosTabelaFotos.setModel(defaultComboBoxModel);
        lstCreditos.insertItemAt("", 0);
    }
}
